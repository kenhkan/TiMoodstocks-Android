/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.kenhkan.timoodstocks;

import java.util.HashMap;

import android.app.Activity;
import android.view.SurfaceView;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiC;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.view.TiCompositeLayout;
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutArrangement;
import org.appcelerator.titanium.view.TiUIView;
import org.appcelerator.titanium.TiApplication;

import com.moodstocks.android.MoodstocksError;
import com.moodstocks.android.Result;
import com.moodstocks.android.ScannerSession;


@Kroll.proxy(creatableInModule=TimoodstocksModule.class)
public class ScannerView extends TiViewProxy implements
	ScannerSession.Listener
{
	// Standard Debugging variables
	private static final String TAG = "ScannerView";

  // Make scanner view a singleton
  private static ScannerView singleton;

	private int ScanOptions = Result.Type.IMAGE;
	private ScannerSession session;
  private TimoodstocksModule module;

	public ScannerView()
	{
		super();
    singleton = this;
    module = TimoodstocksModule.getSingleton();
	}

  public static ScannerView getSingleton() {
    return singleton;
  }

	//----------------------
	// The UI view itself
	//----------------------

	private class ScannerUIView extends TiUIView
	{
		public ScannerUIView(ScannerView proxy, Activity activity) {
			super(proxy);

      // Create view for camera preview
      SurfaceView preview = new SurfaceView(activity);

      // Create a scanner session
      try {
        session = new ScannerSession(activity, (ScannerSession.Listener) proxy, preview);
      } catch (MoodstocksError error) {
        Log.e("timoodstocks.sessionCreateFailed", error.toString());
      }

      // Set session options
      session.setOptions(ScanOptions);

      // Add view
			setNativeView(preview);
		}

		@Override
		public void processProperties(KrollDict d)
		{
			super.processProperties(d);
		}
	}

	@Override
	public TiUIView createView(Activity activity)
	{
		TiUIView view = new ScannerUIView(this, activity);
		view.getLayoutParams().autoFillsHeight = true;
		view.getLayoutParams().autoFillsWidth = true;
		return view;
	}

	//-------------------------
	// Methods
	//-------------------------

  @Kroll.method
  public boolean pause() {
    if (session==null) {
      Log.e("timoodstocks.noSessionFound", "");
    } else if (module.isOperational()) {
      return session.pause();
    } else {
      Log.e("timoodstocks.notOperational", "Not pausing because Moodstocks isn't operational");
    }

    return false;
  }

  @Kroll.method
  public boolean resume() {
    if (session==null) {
      Log.e("timoodstocks.noSessionFound", "");
    } else if (module.isOperational()) {
      return session.resume();
    } else {
      Log.e("timoodstocks.notOperational", "Not resuming because Moodstocks isn't operational");
    }

    return false;
  }

  @Kroll.method
  public boolean snap() {
    if (session==null) {
      Log.e("timoodstocks.noSessionFound", "");
    } else if (module.isOperational()) {
      return session.snap();
    } else {
      Log.e("timoodstocks.notOperational", "Not snapping picture because Moodstocks isn't operational");
    }

    return false;
  }

  @Kroll.method
  public void sync() {
    module.sync();
  }

	//-------------------------
	// ScannerSession.Listener
	//-------------------------

	@Override
	public void onScanComplete(Result result) {
    if (result!=null) {
      HashMap data = new HashMap();
      data.put("value", result.getValue());
      fireEvent("scanComplete", data);
    }
	}

	@Override
	public void onScanFailed(MoodstocksError e) {
    notifyError("scanFailed", e);
	}

	@Override
	public void onApiSearchStart() {
    fireEvent("searchStart", null);
	}

	@Override
	public void onApiSearchComplete(Result result) {
    if (result!=null) {
      HashMap data = new HashMap();
      data.put("value", result.getValue());
      fireEvent("searchComplete", data);
    }
	}

	@Override
	public void onApiSearchFailed(MoodstocksError e) {
    notifyError("searchFailed", e);
	}

	//----------------------
	// Helpers
	//----------------------

  private void notifyError(String event, MoodstocksError e) {
    HashMap error = new HashMap();
    error.put("message", e.toString());
    error.put("code", e.getErrorCode());
    fireEvent(event, error);
  }
}

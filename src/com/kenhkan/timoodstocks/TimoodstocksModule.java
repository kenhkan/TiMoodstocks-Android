/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.kenhkan.timoodstocks;

import android.text.format.DateUtils;
import android.app.Activity;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;

import com.moodstocks.android.MoodstocksError;
import com.moodstocks.android.Scanner;

@Kroll.module(name="Timoodstocks", id="com.kenhkan.timoodstocks")
public class TimoodstocksModule extends KrollModule implements Scanner.SyncListener
{

	// Standard Debugging variables
	private static final String TAG = "TimoodstocksModule";

	private static Scanner scanner = null;
  // State variables
	private static boolean compatible = false;
	private boolean loggedIn = false;
	// Sync related variables
	private long lastSynced = 0;
	private static final long DAY = DateUtils.DAY_IN_MILLIS;
	
	public TimoodstocksModule()
	{
		super();
	}

	//----------------------
	// Events
	//----------------------

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		compatible = Scanner.isCompatible();

    try {
      scanner = Scanner.get();
    } catch (MoodstocksError e) {}
	}

	@Override
	public void onResume(Activity activity) {
		/* perform a sync if:
		 * - the app is started either for the first time,
		 *   or has been killed and is started back.
		 * - the app is resumed from the background AND
		 *   has not been synced for more than one day.
		 */
		super.onResume(activity);
		if (compatible && System.currentTimeMillis() - lastSynced > DAY)
			scanner.sync(this);
	}

	@Override
	public void onDestroy(Activity activity) {
		super.onDestroy(activity);
		if (compatible) {
			try {
				/* you must close the scanner before exiting */
				scanner.close();
			} catch (MoodstocksError e) {
				e.log();
			}
		}
	}

	//----------------------
	// Methods
	//----------------------

	@Kroll.method
  public boolean isCompatible() {
    return this.compatible;
  }

	@Kroll.method
  public boolean isLoggedIn() {
    return this.loggedIn;
  }

	@Kroll.method
	public void login(String apiKey, String apiSecret) {
    try {
      TiApplication appContext = TiApplication.getInstance();
      scanner.open(appContext, apiKey, apiSecret);
      this.loggedIn = true;
    } catch (MoodstocksError e) {
      this.loggedIn = false;
    }
	}

	//----------------------
	// Scanner.SyncListener
	//----------------------

	/* The synchronization is performed seamlessly. Until it has ended,
	 * the user can still use the online search as a fallback.
	 */

	@Override
	public void onSyncStart() {
	}

	@Override
	public void onSyncComplete() {
    lastSynced = System.currentTimeMillis();
	}

	@Override
	public void onSyncFailed(MoodstocksError e) {
	}

	@Override
	public void onSyncProgress(int total, int current) {
	}

}

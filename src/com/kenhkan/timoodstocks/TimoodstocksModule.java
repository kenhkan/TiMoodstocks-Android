/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.kenhkan.timoodstocks;

import java.util.HashMap;

import android.text.format.DateUtils;
import android.app.Activity;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;

import com.moodstocks.android.MoodstocksError;
import com.moodstocks.android.Scanner;

import com.kenhkan.timoodstocks.ScannerView;


@Kroll.module(name="Timoodstocks", id="com.kenhkan.timoodstocks")
public class TimoodstocksModule extends KrollModule
  implements Scanner.SyncListener
{

	// Standard Debugging variables
	private static final String TAG = "TimoodstocksModule";

  // Make scanner view a singleton
  private static TimoodstocksModule singleton;

	private static Scanner scanner = null;
  // State variables
	private static boolean compatible = false;
	private boolean loggedIn = false;
	
	public TimoodstocksModule()
	{
		super();
    singleton = this;
	}

  public static TimoodstocksModule getSingleton() {
    return singleton;
  }

	//----------------------
	// Events
	//----------------------

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		compatible = Scanner.isCompatible();

    try {
      scanner = Scanner.get();
    } catch (MoodstocksError e) {
      Log.e("timoodstocks.scannerCreateFailed", e.toString());
    }
	}

	@Override
	public void onResume(Activity activity) {
		super.onResume(activity);
    ScannerView.getSingleton().resume();
    sync();
	}

  @Override
  public void onPause(Activity activity) {
    super.onPause(activity);
    ScannerView.getSingleton().pause();
  }

	@Override
	public void onDestroy(Activity activity) {
		super.onDestroy(activity);
		if (compatible) {
			try {
				/* you must close the scanner before exiting */
				scanner.close();
			} catch (MoodstocksError e) {
        // Output to log
        Log.e("timoodstocks.scannerCloseFailed", e.toString());
        // Also fire an event
        notifyError("scannerCloseFailed", e);
      }
		}
	}

	//----------------------
	// Methods
	//----------------------

	@Kroll.method
  public boolean isCompatible() {
    return this.compatible;
  }

	@Kroll.method
  public boolean isLoggedIn() {
    return this.loggedIn;
  }

  @Kroll.method
  public boolean isOperational() {
    return this.compatible && this.loggedIn;
  }

	@Kroll.method
	public void login(String apiKey, String apiSecret) {
    try {
      this.loggedIn = true;
      TiApplication appContext = TiApplication.getInstance();
      scanner.open(appContext, apiKey, apiSecret);
    } catch (MoodstocksError e) {
      this.loggedIn = false;
      // Output to log
      Log.e("timoodstocks.scannerOpenFailed", e.toString());
      // Also fire an event
      notifyError("scannerOpenFailed", e);
    }
	}

	@Kroll.method
  public void sync() {
    if (isOperational()) {
      scanner.sync(this);
    }
  }

	//----------------------
	// Scanner.SyncListener
	//----------------------

	/* The synchronization is performed seamlessly. Until it has ended,
	 * the user can still use the online search as a fallback.
	 */

	@Override
	public void onSyncStart() {
    this.fireEvent("syncStarted", null);
	}

	@Override
	public void onSyncComplete() {
    this.fireEvent("syncCompleted", null);
	}

	@Override
	public void onSyncFailed(MoodstocksError e) {
    notifyError("syncFailed", e);
	}

	@Override
	public void onSyncProgress(int total, int current) {
    HashMap progress = new HashMap();
    progress.put("total", total);
    progress.put("current", current);
    this.fireEvent("syncInProgress", progress);
	}

	//----------------------
	// Helpers
	//----------------------

  private void notifyError(String event, MoodstocksError e) {
    HashMap error = new HashMap();
    error.put("message", e.toString());
    error.put("code", e.getErrorCode());
    fireEvent(event, error);
  }
}
